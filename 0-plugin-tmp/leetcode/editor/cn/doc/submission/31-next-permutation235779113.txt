func nextPermutation(nums []int) {
	// 找最后一个从左到右升序序列
	// 找第一个比left大的数字，交换
	// reverse
	n := len(nums)
	lastAsc := n - 2
	for ; lastAsc >= 0; lastAsc-- {
		if nums[lastAsc] >= nums[lastAsc+1] {
			continue
		} else {
			break
		}
	}
	if lastAsc >= 0 {
		//tmpIdx := findFirstBigger(nums[lastAsc+1:], nums[lastAsc])
		//realIdx := lastAsc + tmpIdx + 1
		for realIdx := len(nums)-1; realIdx > lastAsc; realIdx-- {
			if nums[realIdx] > nums[lastAsc] {
				nums[lastAsc], nums[realIdx] = nums[realIdx], nums[lastAsc]
				break
			}
		}
	}
	for l, r := lastAsc+1, len(nums)-1; l < r; l, r = l+1, r-1 {
		nums[l], nums[r] = nums[r], nums[l]
	}
}

func findFirstBigger(nums []int, target int) int {
	left, right := 0, len(nums) - 1
	for left < right {
		mid := left + (right - left) / 2
		if nums[mid] <= target {
			//if nums[mid-1] > target {
			//	return mid-1
			//}
			right = mid - 1
		} else if nums[mid] > target {
			//if mid == len(nums)-1 || nums[mid+1] <= target {
			//	return mid
			//}
			left = mid
		}
	}
	return left
}


//runtime:4 ms
//memory:2.5 MB
