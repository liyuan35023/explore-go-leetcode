func findLength(nums1 []int, nums2 []int) int {
	// move window
	m, n := len(nums1), len(nums2)
	if m < n {
		return moveWindow(nums1, nums2)
	} else {
		return moveWindow(nums2, nums1)
	}
}

func moveWindow(nums1 []int, nums2 []int) int {
	ans := 0
	m, n := len(nums1), len(nums2)
	// 长的不动nums2不动， 短的nums1移动
	//total := m + n - 1
	start1, end2 := len(nums1) - 1, 0
	for ; end2 < m; end2++ {
		tmp := compareAndGetMaxLen(nums1[start1:], nums2[:end2+1])
		ans = max(ans, tmp)
		start1--
	}
	start2 := 1
	for ; end2 < n; end2++ {
		tmp := compareAndGetMaxLen(nums1, nums2[start2:end2+1])
		start2++
		ans = max(ans, tmp)
	}
	end1 := m-2
	for ; end1 >= 0; end1-- {
		tmp := compareAndGetMaxLen(nums1[:end1+1], nums2[start2:])
		ans = max(ans, tmp)
		start2++
	}
	return ans
}

func compareAndGetMaxLen(nums1 []int, nums2 []int) int {
	ans := 0
	count := 0
	for i, j := 0, 0; i < len(nums1) && j < len(nums2); i, j = i+1, j+1 {
		if nums1[i] == nums2[j] {
			count++
		} else {
			count = 0
		}
		ans = max(ans, count)
	}
	return ans
}

func max(x, y int) int {
	if x > y {
		return x
	}
	return y
}

//runtime:24 ms
//memory:3.5 MB
